// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: persona/v1/persona.proto

package personav1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PersonaService_CreateUser_FullMethodName         = "/persona.v1.PersonaService/CreateUser"
	PersonaService_GetUserProfile_FullMethodName     = "/persona.v1.PersonaService/GetUserProfile"
	PersonaService_GetUserByPhone_FullMethodName     = "/persona.v1.PersonaService/GetUserByPhone"
	PersonaService_GetUserByEmail_FullMethodName     = "/persona.v1.PersonaService/GetUserByEmail"
	PersonaService_UpdateUserProfile_FullMethodName  = "/persona.v1.PersonaService/UpdateUserProfile"
	PersonaService_ValidateUserExists_FullMethodName = "/persona.v1.PersonaService/ValidateUserExists"
)

// PersonaServiceClient is the client API for PersonaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// PersonaService 只提供纯粹的用户档案管理 (CRUD) 功能。
// 所有认证、密码、令牌相关操作均由专门的 Auth 服务负责。
type PersonaServiceClient interface {
	// 创建一个新用户档案 (不包含密码)
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*User, error)
	// 根据ID获取用户档案信息
	GetUserProfile(ctx context.Context, in *GetUserProfileRequest, opts ...grpc.CallOption) (*User, error)
	// 通过手机号查询用户档案
	GetUserByPhone(ctx context.Context, in *GetUserByPhoneRequest, opts ...grpc.CallOption) (*User, error)
	// 通过电子邮箱查询用户档案
	GetUserByEmail(ctx context.Context, in *GetUserByEmailRequest, opts ...grpc.CallOption) (*User, error)
	// 更新用户档案信息
	UpdateUserProfile(ctx context.Context, in *UpdateUserProfileRequest, opts ...grpc.CallOption) (*User, error)
	// [对内核心接口] 验证一个用户ID是否存在且状态正常
	ValidateUserExists(ctx context.Context, in *ValidateUserExistsRequest, opts ...grpc.CallOption) (*ValidateUserExistsResponse, error)
}

type personaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPersonaServiceClient(cc grpc.ClientConnInterface) PersonaServiceClient {
	return &personaServiceClient{cc}
}

func (c *personaServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, PersonaService_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personaServiceClient) GetUserProfile(ctx context.Context, in *GetUserProfileRequest, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, PersonaService_GetUserProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personaServiceClient) GetUserByPhone(ctx context.Context, in *GetUserByPhoneRequest, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, PersonaService_GetUserByPhone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personaServiceClient) GetUserByEmail(ctx context.Context, in *GetUserByEmailRequest, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, PersonaService_GetUserByEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personaServiceClient) UpdateUserProfile(ctx context.Context, in *UpdateUserProfileRequest, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, PersonaService_UpdateUserProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personaServiceClient) ValidateUserExists(ctx context.Context, in *ValidateUserExistsRequest, opts ...grpc.CallOption) (*ValidateUserExistsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateUserExistsResponse)
	err := c.cc.Invoke(ctx, PersonaService_ValidateUserExists_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PersonaServiceServer is the server API for PersonaService service.
// All implementations must embed UnimplementedPersonaServiceServer
// for forward compatibility.
//
// PersonaService 只提供纯粹的用户档案管理 (CRUD) 功能。
// 所有认证、密码、令牌相关操作均由专门的 Auth 服务负责。
type PersonaServiceServer interface {
	// 创建一个新用户档案 (不包含密码)
	CreateUser(context.Context, *CreateUserRequest) (*User, error)
	// 根据ID获取用户档案信息
	GetUserProfile(context.Context, *GetUserProfileRequest) (*User, error)
	// 通过手机号查询用户档案
	GetUserByPhone(context.Context, *GetUserByPhoneRequest) (*User, error)
	// 通过电子邮箱查询用户档案
	GetUserByEmail(context.Context, *GetUserByEmailRequest) (*User, error)
	// 更新用户档案信息
	UpdateUserProfile(context.Context, *UpdateUserProfileRequest) (*User, error)
	// [对内核心接口] 验证一个用户ID是否存在且状态正常
	ValidateUserExists(context.Context, *ValidateUserExistsRequest) (*ValidateUserExistsResponse, error)
	mustEmbedUnimplementedPersonaServiceServer()
}

// UnimplementedPersonaServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPersonaServiceServer struct{}

func (UnimplementedPersonaServiceServer) CreateUser(context.Context, *CreateUserRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedPersonaServiceServer) GetUserProfile(context.Context, *GetUserProfileRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserProfile not implemented")
}
func (UnimplementedPersonaServiceServer) GetUserByPhone(context.Context, *GetUserByPhoneRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByPhone not implemented")
}
func (UnimplementedPersonaServiceServer) GetUserByEmail(context.Context, *GetUserByEmailRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByEmail not implemented")
}
func (UnimplementedPersonaServiceServer) UpdateUserProfile(context.Context, *UpdateUserProfileRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserProfile not implemented")
}
func (UnimplementedPersonaServiceServer) ValidateUserExists(context.Context, *ValidateUserExistsRequest) (*ValidateUserExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateUserExists not implemented")
}
func (UnimplementedPersonaServiceServer) mustEmbedUnimplementedPersonaServiceServer() {}
func (UnimplementedPersonaServiceServer) testEmbeddedByValue()                        {}

// UnsafePersonaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PersonaServiceServer will
// result in compilation errors.
type UnsafePersonaServiceServer interface {
	mustEmbedUnimplementedPersonaServiceServer()
}

func RegisterPersonaServiceServer(s grpc.ServiceRegistrar, srv PersonaServiceServer) {
	// If the following call pancis, it indicates UnimplementedPersonaServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PersonaService_ServiceDesc, srv)
}

func _PersonaService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonaServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonaService_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonaServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonaService_GetUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonaServiceServer).GetUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonaService_GetUserProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonaServiceServer).GetUserProfile(ctx, req.(*GetUserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonaService_GetUserByPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByPhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonaServiceServer).GetUserByPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonaService_GetUserByPhone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonaServiceServer).GetUserByPhone(ctx, req.(*GetUserByPhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonaService_GetUserByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonaServiceServer).GetUserByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonaService_GetUserByEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonaServiceServer).GetUserByEmail(ctx, req.(*GetUserByEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonaService_UpdateUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonaServiceServer).UpdateUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonaService_UpdateUserProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonaServiceServer).UpdateUserProfile(ctx, req.(*UpdateUserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonaService_ValidateUserExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateUserExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonaServiceServer).ValidateUserExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonaService_ValidateUserExists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonaServiceServer).ValidateUserExists(ctx, req.(*ValidateUserExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PersonaService_ServiceDesc is the grpc.ServiceDesc for PersonaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PersonaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "persona.v1.PersonaService",
	HandlerType: (*PersonaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _PersonaService_CreateUser_Handler,
		},
		{
			MethodName: "GetUserProfile",
			Handler:    _PersonaService_GetUserProfile_Handler,
		},
		{
			MethodName: "GetUserByPhone",
			Handler:    _PersonaService_GetUserByPhone_Handler,
		},
		{
			MethodName: "GetUserByEmail",
			Handler:    _PersonaService_GetUserByEmail_Handler,
		},
		{
			MethodName: "UpdateUserProfile",
			Handler:    _PersonaService_UpdateUserProfile_Handler,
		},
		{
			MethodName: "ValidateUserExists",
			Handler:    _PersonaService_ValidateUserExists_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "persona/v1/persona.proto",
}
